{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Wiki Song Match Here you will find all the Documentation, Installation Guide, References and How to play the Game","title":"Welcome to Wiki Song Match"},{"location":"#welcome-to-wiki-song-match","text":"Here you will find all the Documentation, Installation Guide, References and How to play the Game","title":"Welcome to Wiki Song Match"},{"location":"Installation/","text":"Installation There are 2 \"sub-repos\" inside this repository that you can install: Full pipeline (Creating your own Vector Databse) Guessing game (Find a better song than there is in the database) Full Pipeline There are alot of ways to install a repository. The following instructions are testen on Windows and MacOS. 1) Install python: This repository was built and tested on python 3.11.10 2) Create virtual environment and install requirements: Windows python -m venv .venv \".venv/Scripts/activate\" pip install -r requirements_full.txt MacOS python -m venv .venv source .venv/bin/activate pip insatll -r requirements_full.txt 3) Download dataset from here. Save it as dataset.csv and put it inside the data folder. Otherwise, adapt the path inside load_embeddings_to_pineconde.py 4) Create an account in Pinecone and create an API key . 5) Create a .env file and add your API key inside the file. It should look like this: PINECONE_KEY=enterYourKeyHere 6) Load your data inside the vector database by running: python scripts/generate_lyrics_embeddings.py python scripts/load_embeddings_to_pinecone.py This process can take several hours! Note: the first script can be interruped and resumed any time. Progress is saved every 100 steps. 7) Try the matching by running: python get_match.py -a <your-article> . If you don't pass an article, a random wikipedia article is taken. 8) Optional: Create your own TSNE plot: python scripts/generate_wikipedia_embeddings.py python scripts/create_tsne_plot.py This process can take several hours! Note: the first script can be interruped and resumed any time. Progress is saved every 100 steps. Guessing Game If you already did the Full Pipeline installation, skip to step 3. There are alot of ways to install a repository. The following instructions are testen on Windows and MacOS. 1) Install python: This repository was built and tested on python 3.11.10 2) Create virtual environment and install requirements: Windows python -m venv .venv \".venv/Scripts/activate\" pip install -r requirements_game.txt MacOS python -m venv .venv source .venv/bin/activate pip insatll -r requirements_game.txt 3) Run the game with python game.py","title":"Installation"},{"location":"Installation/#installation","text":"There are 2 \"sub-repos\" inside this repository that you can install: Full pipeline (Creating your own Vector Databse) Guessing game (Find a better song than there is in the database)","title":"Installation"},{"location":"Installation/#full-pipeline","text":"There are alot of ways to install a repository. The following instructions are testen on Windows and MacOS. 1) Install python: This repository was built and tested on python 3.11.10 2) Create virtual environment and install requirements: Windows python -m venv .venv \".venv/Scripts/activate\" pip install -r requirements_full.txt MacOS python -m venv .venv source .venv/bin/activate pip insatll -r requirements_full.txt 3) Download dataset from here. Save it as dataset.csv and put it inside the data folder. Otherwise, adapt the path inside load_embeddings_to_pineconde.py 4) Create an account in Pinecone and create an API key . 5) Create a .env file and add your API key inside the file. It should look like this: PINECONE_KEY=enterYourKeyHere 6) Load your data inside the vector database by running: python scripts/generate_lyrics_embeddings.py python scripts/load_embeddings_to_pinecone.py This process can take several hours! Note: the first script can be interruped and resumed any time. Progress is saved every 100 steps. 7) Try the matching by running: python get_match.py -a <your-article> . If you don't pass an article, a random wikipedia article is taken. 8) Optional: Create your own TSNE plot: python scripts/generate_wikipedia_embeddings.py python scripts/create_tsne_plot.py This process can take several hours! Note: the first script can be interruped and resumed any time. Progress is saved every 100 steps.","title":"Full Pipeline"},{"location":"Installation/#guessing-game","text":"If you already did the Full Pipeline installation, skip to step 3. There are alot of ways to install a repository. The following instructions are testen on Windows and MacOS. 1) Install python: This repository was built and tested on python 3.11.10 2) Create virtual environment and install requirements: Windows python -m venv .venv \".venv/Scripts/activate\" pip install -r requirements_game.txt MacOS python -m venv .venv source .venv/bin/activate pip insatll -r requirements_game.txt 3) Run the game with python game.py","title":"Guessing Game"},{"location":"documentation/","text":"Research and Documentation Initial Ideas In the beginning my main idea was to do something with embeddings. A spacial representation of data just seemed interesting to me and wanted to have a go at this myself and pack it into a creative project. I searched for data, that is widely availlable and easy to process. I Wikipedia articles were the first thing that came to my mind. I quickly searched the web and found a python packege to retrieve them easily. Now I needed something that I can compare the articles with. Nothing really came to my mind at first but a few days later, i had the idea to match songs to wikipedia articles. Getting the Embeddings My main goal of this project was to let the algorithm do all the matching itself, without interference of a human. So i needed methods that require no labeling. Additionally, I wanted to use as many existing technologies, because the project seemed ambitious for a 3 credits module. With those goals in mind, the only really effective way to compare songs to articles was via the lyrics. In order to create a good matching algorithm, the embeddings need to as homogeneous as possible","title":"Research and Documentation"},{"location":"documentation/#research-and-documentation","text":"","title":"Research and Documentation"},{"location":"documentation/#initial-ideas","text":"In the beginning my main idea was to do something with embeddings. A spacial representation of data just seemed interesting to me and wanted to have a go at this myself and pack it into a creative project. I searched for data, that is widely availlable and easy to process. I Wikipedia articles were the first thing that came to my mind. I quickly searched the web and found a python packege to retrieve them easily. Now I needed something that I can compare the articles with. Nothing really came to my mind at first but a few days later, i had the idea to match songs to wikipedia articles.","title":"Initial Ideas"},{"location":"documentation/#getting-the-embeddings","text":"My main goal of this project was to let the algorithm do all the matching itself, without interference of a human. So i needed methods that require no labeling. Additionally, I wanted to use as many existing technologies, because the project seemed ambitious for a 3 credits module. With those goals in mind, the only really effective way to compare songs to articles was via the lyrics. In order to create a good matching algorithm, the embeddings need to as homogeneous as possible","title":"Getting the Embeddings"},{"location":"game/","text":"Game Thanks to Laura's question after my final presentation, that gave me the idea for this game. How it Works After starting the game, you are presented with a random Wikipedia article and its summary. It is your goal to find a song that matches this Wikipedia article as close as possible with its lyrics. Enter the song and artist name in each of the text-fields. When you press \"Submit\", your song gets searched and processed like every other song in the database. Meanwhile, a bot also selects a song from the 25'000 Songs, that are in the database. When the process is finished, you will be prompted with a screen, that shows you the distance between the embeddings from your song choice to the wikipedia article. The same goes for the bot. Whoever is closer Winns! Disclaimer This game has been coded in 1 day due to my limited time at the moment. You might experience crashes and unhandled exceptions, but those are to be expected. This game is mainly here to showcase the \"tech\" and interact in a fun way with it. Also im not a designer ;)","title":"Game"},{"location":"game/#game","text":"Thanks to Laura's question after my final presentation, that gave me the idea for this game.","title":"Game"},{"location":"game/#how-it-works","text":"After starting the game, you are presented with a random Wikipedia article and its summary. It is your goal to find a song that matches this Wikipedia article as close as possible with its lyrics. Enter the song and artist name in each of the text-fields. When you press \"Submit\", your song gets searched and processed like every other song in the database. Meanwhile, a bot also selects a song from the 25'000 Songs, that are in the database. When the process is finished, you will be prompted with a screen, that shows you the distance between the embeddings from your song choice to the wikipedia article. The same goes for the bot. Whoever is closer Winns!","title":"How it Works"},{"location":"game/#disclaimer","text":"This game has been coded in 1 day due to my limited time at the moment. You might experience crashes and unhandled exceptions, but those are to be expected. This game is mainly here to showcase the \"tech\" and interact in a fun way with it. Also im not a designer ;)","title":"Disclaimer"},{"location":"references/","text":"References In here you find links used during research and implementation. Used in final product Lyrics Paper used for preprocessing steps and dataset Lyrics.com and their API Storage and Database Pinecone Pandas Preprocessing of Text Yake Keyword Extractor Spacy nltk Transformer Library (BERT) Game Pygame Background Image Deployment Google Cloud Deployment Used during research Google Gemini Spotify Python API ChatGPT Github Copilot Plotly in combination with TSNE","title":"References"},{"location":"references/#references","text":"In here you find links used during research and implementation.","title":"References"},{"location":"references/#used-in-final-product","text":"","title":"Used in final product"},{"location":"references/#lyrics","text":"Paper used for preprocessing steps and dataset Lyrics.com and their API","title":"Lyrics"},{"location":"references/#storage-and-database","text":"Pinecone Pandas","title":"Storage and Database"},{"location":"references/#preprocessing-of-text","text":"Yake Keyword Extractor Spacy nltk Transformer Library (BERT)","title":"Preprocessing of Text"},{"location":"references/#game","text":"Pygame Background Image","title":"Game"},{"location":"references/#deployment","text":"Google Cloud Deployment","title":"Deployment"},{"location":"references/#used-during-research","text":"Google Gemini Spotify Python API ChatGPT Github Copilot Plotly in combination with TSNE","title":"Used during research"}]}